import csv
from mapgis.models import SuburbData  # 用你实际的模型名称替代 YourModel
def run():
    with open('scripts/all_suburbs_output.csv', 'r') as csvfile:  # 用你实际的CSV文件名替代 your_csv_file.csv
        reader = csv.DictReader(csvfile)
        for row in reader:
            suburb_data = {
                'Suburb': row['Suburb'],
                'SAL_CODE': row['SAL_CODE'],
                'Median_age_of_persons': (row['Median age of persons']),
                'Median_mortgage_repayment': (row['Median mortgage repayment ($/monthly)']),
                'Median_total_personal_income': (row['Median total personal income ($/weekly)']),
                'Median_rent_weekly': (row['Median rent ($/weekly)(a)']),
                'Median_total_family_income': (row['Median total family income ($/weekly)']),
                'Average_number_of_persons_per_bedroom': (row['Average number of persons per bedroom']),
                'Median_total_household_income_weekly': (row['Median total household income ($/weekly)']),
                'Average_household_size': (row['Average household size']),
                'Counted_at_home_on_Census_Night': (row['Counted at home on Census Night']),
                'Total_visitors': (row['Total visitors']),
                'Top1_Born_Place': row['Top1 Born Place'],
                'Top2_Born_Place': row['Top2 Born Place'],
                'Top3_Born_Place': row['Top3 Born Place'],
                'Top1_Number': (row['Top1 Number']),
                'Top2_Number': (row['Top2 Number']),
                'Top3_Number': (row['Top3 Number']),
                'Total_Number': (row['Total Number']),
                'Buddhism': (row['Buddhism']),
                'Christianity': (row['Christianity']),
                'Hinduism': (row['Hinduism']),
                'Islam': (row['Islam']),
                'Judaism': (row['Judaism']),
                'Other_Religions': (row['Other Religions']),
                'Other_and_No_Religious_Affiliation': (row['Other and No Religious Affiliation']),
                'Religious_affiliation_not_stated': (row['Religious affiliation not stated']),
                'Year_12_or_equivalent': (row['Year 12 or equivalent']),
                'Year_11_or_equivalent': (row['Year 11 or equivalent']),
                'Year_10_or_equivalent': (row['Year 10 or equivalent']),
                'Year_9_or_equivalent': (row['Year 9 or equivalent']),
                'Year_8_or_below': (row['Year 8 or below']),
                'Did_not_go_to_school': (row['Did not go to school']),
                'Highest_year_of_school_not_stated': (row['Highest year of school not stated']),
                'Total': (row['Total']),
                'None_of_the_selected_conditions': (row['None of the selected conditions']),
                'Long_term_health_conditions': (row['Long term health conditions']),
                'Own_child_children_only': (row['Own child/children only']),
                'Own_child_children_and_other_children': (row['Own child/children and other child/children']),
                'Other_children_only': (row['Other child/children only']),
                'Total_employed': (row['Total employed']),
                'Total_unemployed': (row['Total unemployed']),
                'Not_in_the_labour_force': (row['Not in the labour force']),
                'Train': (row['Train']),
                'Bus': (row['Bus']),
                'Ferry': (row['Ferry']),
                'Tram_light_rail': (row['Tram/light rail']),
                'Taxi_ride_share_service': (row['Taxi/ride-share service']),
                'Car_as_driver': (row['Car, as driver']),
                'Car_as_passenger': (row['Car, as passenger']),
                'Truck': (row['Truck']),
                'Motorbike_scooter': (row['Motorbike/scooter']),
                'Bicycle': (row['Bicycle']),
                'Other': (row['Other']),
                'Walked_only': (row['Walked only(b)']),
            }
            SuburbData.objects.create(**suburb_data)